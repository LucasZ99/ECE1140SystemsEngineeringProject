# Form implementation generated from reading ui file 'TestBench.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import threading

from PyQt6 import QtCore, QtGui, QtWidgets
import os

# Global Variables
authority = 5
suggestedSpeed = 50
numSwitches = 1
numBlocks = 15
switches = ['L'] * numSwitches
blocks = ['E'] * numBlocks

currentDir = os.path.dirname(__file__)  # setting up dir to work in any location in a directory
subdir = 'TBData'
subfolder = os.path.join(currentDir, subdir)
print(subfolder)
file = 'TBData.txt'
path = os.path.join(subdir, file)


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(369, 365)
        MainWindow.setMinimumSize(QtCore.QSize(369, 365))
        MainWindow.setMaximumSize(QtCore.QSize(369, 365))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.suggSpeedText = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.suggSpeedText.setGeometry(QtCore.QRect(140, 210, 104, 31))
        self.suggSpeedText.setObjectName("SuggestedSpeed")

        self.apply = QtWidgets.QPushButton(parent=self.centralwidget)
        self.apply.setGeometry(QtCore.QRect(200, 260, 75, 24))
        self.apply.setObjectName("apply")

        self.blOccLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.blOccLabel.setGeometry(QtCore.QRect(28, 40, 95, 16))
        self.blOccLabel.setObjectName("blockOccLabel")

        self.blOccDropdown = QtWidgets.QComboBox(parent=self.centralwidget)
        self.blOccDropdown.setGeometry(QtCore.QRect(140, 40, 71, 22))
        self.blOccDropdown.setObjectName("blOccDropdown")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")
        self.blOccDropdown.addItem("")

        self.groupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(9, 89, 351, 233))
        self.groupBox.setObjectName("groupBox")

        self.swSelLabel = QtWidgets.QLabel(parent=self.groupBox)
        self.swSelLabel.setGeometry(QtCore.QRect(40, 80, 81, 20))
        self.swSelLabel.setObjectName("switchSelLabel")

        self.swSelDropdown = QtWidgets.QComboBox(parent=self.groupBox)
        self.swSelDropdown.setGeometry(QtCore.QRect(130, 80, 81, 22))
        self.swSelDropdown.setObjectName("swSelDropdown")
        self.swSelDropdown.addItem("")

        self.authLabel = QtWidgets.QLabel(parent=self.groupBox)
        self.authLabel.setGeometry(QtCore.QRect(70, 30, 51, 20))
        self.authLabel.setObjectName("authLabel")

        self.authText = QtWidgets.QTextEdit(parent=self.groupBox)
        self.authText.setGeometry(QtCore.QRect(130, 30, 104, 31))
        self.authText.setObjectName("authText")

        self.blocksLabel = QtWidgets.QLabel(parent=self.groupBox)
        self.blocksLabel.setGeometry(QtCore.QRect(240, 30, 51, 20))
        self.blocksLabel.setObjectName("blocksLabel")

        self.swLeftCheck = QtWidgets.QCheckBox(parent=self.groupBox)
        self.swLeftCheck.setGeometry(QtCore.QRect(230, 80, 51, 20))
        self.swLeftCheck.setObjectName("swLeftCheck")

        self.swRightCheck = QtWidgets.QCheckBox(parent=self.groupBox)
        self.swRightCheck.setGeometry(QtCore.QRect(290, 80, 51, 20))
        self.swRightCheck.setObjectName("swRightCheck")

        self.msLabel = QtWidgets.QLabel(parent=self.groupBox)
        self.msLabel.setGeometry(QtCore.QRect(240, 120, 51, 20))
        self.msLabel.setObjectName("msLabel")

        self.authWarnLabel = QtWidgets.QLabel(parent=self.groupBox)
        self.authWarnLabel.setGeometry(QtCore.QRect(120, 10, 131, 20))
        self.authWarnLabel.setText("")
        self.authWarnLabel.setObjectName("authWarnLabel")

        self.speedWarnLabel = QtWidgets.QLabel(parent=self.groupBox)
        self.speedWarnLabel.setGeometry(QtCore.QRect(130, 100, 121, 20))
        self.speedWarnLabel.setText("")
        self.speedWarnLabel.setObjectName("speedWarnLabel")

        self.defaults = QtWidgets.QPushButton(parent=self.groupBox)
        self.defaults.setGeometry(QtCore.QRect(70, 170, 75, 24))
        self.defaults.setObjectName("defaults")

        self.groupBox_2 = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(8, 10, 351, 71))
        self.groupBox_2.setObjectName("groupBox_2")

        self.occCheck = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.occCheck.setGeometry(QtCore.QRect(240, 40, 74, 20))
        self.occCheck.setObjectName("occCheck")

        self.suggSpeedLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.suggSpeedLabel.setGeometry(QtCore.QRect(40, 210, 91, 20))
        self.suggSpeedLabel.setObjectName("suggSpeedLabel")

        self.groupBox.raise_()
        self.groupBox_2.raise_()
        self.suggSpeedText.raise_()
        self.apply.raise_()
        self.blOccLabel.raise_()
        self.blOccDropdown.raise_()
        self.occCheck.raise_()
        self.suggSpeedLabel.raise_()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 369, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # defaults
        self.swLeftCheck.setChecked(True)
        self.authText.setText("5")
        self.suggSpeedText.setText("50")


        # Events:
        self.swLeftCheck.clicked.connect(self.swSelLeftHandler)

        self.swRightCheck.clicked.connect(self.swSelRightHandler)

        self.apply.clicked.connect(self.applyHandler)

        self.occCheck.clicked.connect(self.blOccupancyHandler)

        self.swSelDropdown.currentIndexChanged.connect(self.swStatusHandler)

        self.blOccDropdown.currentIndexChanged.connect(self.blStatusHandler)

        self.authText.textChanged.connect(self.authTextHandler)

        self.suggSpeedText.textChanged.connect(self.sugSpeedTextHandler)

        self.defaults.clicked.connect(self.defaultsPressHandler)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Track Controller Test Bench"))
        self.apply.setText(_translate("MainWindow", "Apply"))
        self.blOccLabel.setText(_translate("MainWindow", "Block Occupancy:"))
        self.blOccDropdown.setItemText(0, _translate("MainWindow", "Block 1"))
        self.blOccDropdown.setItemText(1, _translate("MainWindow", "Block 2"))
        self.blOccDropdown.setItemText(2, _translate("MainWindow", "Block 3"))
        self.blOccDropdown.setItemText(3, _translate("MainWindow", "Block 4"))
        self.blOccDropdown.setItemText(4, _translate("MainWindow", "Block 5"))
        self.blOccDropdown.setItemText(5, _translate("MainWindow", "Block 6"))
        self.blOccDropdown.setItemText(6, _translate("MainWindow", "Block 7"))
        self.blOccDropdown.setItemText(7, _translate("MainWindow", "Block 8"))
        self.blOccDropdown.setItemText(8, _translate("MainWindow", "Block 9"))
        self.blOccDropdown.setItemText(9, _translate("MainWindow", "Block 10"))
        self.blOccDropdown.setItemText(10, _translate("MainWindow", "Block 11"))
        self.blOccDropdown.setItemText(11, _translate("MainWindow", "Block 12"))
        self.blOccDropdown.setItemText(12, _translate("MainWindow", "Block 13"))
        self.blOccDropdown.setItemText(13, _translate("MainWindow", "Block 14"))
        self.blOccDropdown.setItemText(14, _translate("MainWindow", "Block 15"))
        self.groupBox.setTitle(_translate("MainWindow", "Inputs from CTC:"))
        self.swSelLabel.setText(_translate("MainWindow", "Switch Selction:"))
        self.swSelDropdown.setItemText(0, _translate("MainWindow", "SW1"))
        self.authLabel.setText(_translate("MainWindow", "Authority:"))
        self.blocksLabel.setText(_translate("MainWindow", "blocks"))
        self.swLeftCheck.setText(_translate("MainWindow", "Left"))
        self.swRightCheck.setText(_translate("MainWindow", "Right"))
        self.defaults.setText(_translate("MainWindow", "Defaults"))
        self.msLabel.setText(_translate("MainWindow", "m/s"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Inputs from Track Model:"))
        self.occCheck.setText(_translate("MainWindow", "Occupied"))
        self.suggSpeedLabel.setText(_translate("MainWindow", "Suggested Speed:"))

    # Handlers:
    # mutual exclusion for check boxes
    def swStatusHandler(self):
        if switches[self.swSelDropdown.currentIndex()] == 'L':
            self.swLeftCheck.setChecked(True)
            self.swRightCheck.setChecked(False)
        else:
            self.swLeftCheck.setChecked(False)
            self.swRightCheck.setChecked(True)

    def swSelLeftHandler(self):  # 'Left' checkbox is activated
        if self.swLeftCheck.isChecked():
            self.swRightCheck.setChecked(False)
            switchIndex = self.swSelDropdown.currentIndex()
            switches[switchIndex] = 'L'
        else:
            self.swRightCheck.setChecked(True)

    def swSelRightHandler(self):  # 'Right' checkbox is activated
        if self.swRightCheck.isChecked():
            self.swLeftCheck.setChecked(False)
            switchIndex = self.swSelDropdown.currentIndex()
            switches[switchIndex] = 'R'
        else:
            self.swLeftCheck.setChecked(True)

    def blStatusHandler(self):  # New block is selected from the dropdown menu
        if blocks[self.blOccDropdown.currentIndex()] == 'O':
            self.occCheck.setChecked(True)
        else:
            self.occCheck.setChecked(False)

    def defaultsPressHandler(self):  # Defaults button is pressed
        global authority
        global suggestedSpeed
        global numSwitches
        global numBlocks
        global switches
        global blocks

        # assigning vals from defaults to variables
        authority = 5
        suggestedSpeed = 50
        for i in range(0, numSwitches):
            switches[i] = 'L'
        for j in range(0, numBlocks):
            blocks[j] = 'E'

        # updating UI
        if (self.occCheck.isChecked()) and (blocks[self.blOccDropdown.currentIndex()] == 'E'):
            self.occCheck.setChecked(False)
        self.blOccDropdown.setCurrentIndex(0)

        self.authText.setText(str(authority))  # authority update

        self.swLeftCheck.setChecked(True)  # switch state update
        self.swRightCheck.setChecked(False)
        self.swSelDropdown.setCurrentIndex(0)

        self.suggSpeedText.setText(str(suggestedSpeed))  # suggested speed update

    def blOccupancyHandler(self):  # The block occupancy status of a block is altered
        if self.occCheck.isChecked():
            blocks[self.blOccDropdown.currentIndex()] = 'O'
        else:
            blocks[self.blOccDropdown.currentIndex()] = 'E'

    def authTextHandler(self):  # When the text field is changed for authority
        text = self.authText.toPlainText()  # checking to see if it is a valid integer
        text2 = self.suggSpeedText.toPlainText()
        if text.isdigit():
            value = int(text)
            if value <= 0:
                self.authWarnLabel.setText("must be positive integer")
                self.authWarnLabel.setStyleSheet("color : red")
                self.apply.setEnabled(False)
            else:
                self.authWarnLabel.setText("")
                global authority  # pass value out to authority variable
                authority = value
                if text2.isnumeric() or text2.replace(".", "").isnumeric():
                    self.apply.setEnabled(True)

        else:
            self.authWarnLabel.setText("must be positive integer")
            self.authWarnLabel.setStyleSheet("color : red")
            self.apply.setEnabled(False)

    def sugSpeedTextHandler(self):
        text = self.suggSpeedText.toPlainText()  # checking to see if it is a valid integer
        text2 = self.authText.toPlainText()
        if text.isnumeric() or text.replace(".", "").isnumeric():  # text must be an int or float
            value = float(text)
            if value <= 0:
                self.speedWarnLabel.setText("must be positive value")
                self.speedWarnLabel.setStyleSheet("color : red")
                self.apply.setEnabled(False)
            else:
                self.speedWarnLabel.setText("")
                global suggestedSpeed  # pass suggestedSpeed out the global variable
                suggestedSpeed = value
                if text2.isdigit():
                    self.apply.setEnabled(True)

        else:
            self.speedWarnLabel.setText("must be positive value")
            self.speedWarnLabel.setStyleSheet("color : red")
            self.apply.setEnabled(False)

    def applyHandler(self):  # When the apply button is pressed [this will be used to send vals out into main module]
        with open (path, 'w') as file:  # writing the variables to a text doc to be read by main
            file.write(f"authority = {authority}\n")
            file.write(f"suggestedSpeed = {suggestedSpeed}\n")
            file.write(f"switches = {switches}\n")
            file.write(f"blocks = {blocks}\n")


def tbMain():
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())

def runTB():
    thread = threading.Thread(target=tbMain)
    thread.start()
