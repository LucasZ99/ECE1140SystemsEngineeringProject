# Form implementation generated from reading ui file 'TestBench.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets

# Global Variables
authority = 5
suggestSpeed = 50
numSwitches = 2
numBlocks = 15
switches = ['L'] * numSwitches
blocks = ['E'] * numBlocks

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(369, 365)
        MainWindow.setMinimumSize(QtCore.QSize(369, 365))
        MainWindow.setMaximumSize(QtCore.QSize(369, 365))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.textEdit = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(140, 210, 104, 31))
        self.textEdit.setObjectName("textEdit")

        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(200, 260, 75, 24))
        self.pushButton.setObjectName("pushButton")

        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(28, 40, 95, 16))
        self.label_4.setObjectName("label_4")

        self.comboBox_3 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(140, 40, 71, 22))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")

        self.groupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(9, 89, 351, 233))
        self.groupBox.setObjectName("groupBox")

        self.label = QtWidgets.QLabel(parent=self.groupBox)
        self.label.setGeometry(QtCore.QRect(40, 80, 81, 20))
        self.label.setObjectName("label")

        self.comboBox = QtWidgets.QComboBox(parent=self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(130, 80, 81, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")

        self.label_2 = QtWidgets.QLabel(parent=self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(70, 30, 51, 20))
        self.label_2.setObjectName("label_2")

        self.textEdit_3 = QtWidgets.QTextEdit(parent=self.groupBox)
        self.textEdit_3.setGeometry(QtCore.QRect(130, 30, 104, 31))
        self.textEdit_3.setObjectName("textEdit_3")

        self.label_3 = QtWidgets.QLabel(parent=self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(240, 30, 51, 20))
        self.label_3.setObjectName("label_3")

        self.checkBox_4 = QtWidgets.QCheckBox(parent=self.groupBox)
        self.checkBox_4.setGeometry(QtCore.QRect(230, 80, 51, 20))
        self.checkBox_4.setObjectName("checkBox_4")

        self.checkBox_6 = QtWidgets.QCheckBox(parent=self.groupBox)
        self.checkBox_6.setGeometry(QtCore.QRect(290, 80, 51, 20))
        self.checkBox_6.setObjectName("checkBox_6")

        self.label_6 = QtWidgets.QLabel(parent=self.groupBox)
        self.label_6.setGeometry(QtCore.QRect(240, 120, 51, 20))
        self.label_6.setObjectName("label_6")

        self.label_7 = QtWidgets.QLabel(parent=self.groupBox)
        self.label_7.setGeometry(QtCore.QRect(120, 10, 131, 20))
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")

        self.label_8 = QtWidgets.QLabel(parent=self.groupBox)
        self.label_8.setGeometry(QtCore.QRect(130, 100, 121, 20))
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")

        self.pushButton_2 = QtWidgets.QPushButton(parent=self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(70, 170, 75, 24))
        self.pushButton_2.setObjectName("pushButton_2")

        self.groupBox_2 = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(8, 10, 351, 71))
        self.groupBox_2.setObjectName("groupBox_2")

        self.checkBox_3 = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.checkBox_3.setGeometry(QtCore.QRect(240, 40, 74, 20))
        self.checkBox_3.setObjectName("checkBox_3")

        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(40, 210, 91, 20))
        self.label_5.setObjectName("label_5")

        self.groupBox.raise_()
        self.groupBox_2.raise_()
        self.textEdit.raise_()
        self.pushButton.raise_()
        self.label_4.raise_()
        self.comboBox_3.raise_()
        self.checkBox_3.raise_()
        self.label_5.raise_()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 369, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # defaults
        self.checkBox_4.setChecked(True)
        self.textEdit_3.setText("5")
        self.textEdit.setText("50")


        # Events:
        self.checkBox_4.clicked.connect(self.swSelLeftHandler)

        self.checkBox_6.clicked.connect(self.swSelRightHandler)

        self.pushButton.clicked.connect(self.applyHandler)

        self.checkBox_3.clicked.connect(self.blOccupancyHandler)

        self.comboBox.currentIndexChanged.connect(self.swStatusHandler)

        self.comboBox_3.currentIndexChanged.connect(self.blStatusHandler)

        self.textEdit_3.textChanged.connect(self.authTextHandler)

        self.textEdit.textChanged.connect(self.sugSpeedTextHandler)

        self.pushButton_2.clicked.connect(self.defaultsPressHandler)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Track Controller Test Bench"))
        self.pushButton.setText(_translate("MainWindow", "Apply"))
        self.label_4.setText(_translate("MainWindow", "Block Occupancy:"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "Block 1"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "Block 2"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "Block 3"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "Block 4"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "Block 5"))
        self.comboBox_3.setItemText(5, _translate("MainWindow", "Block 6"))
        self.comboBox_3.setItemText(6, _translate("MainWindow", "Block 7"))
        self.comboBox_3.setItemText(7, _translate("MainWindow", "Block 8"))
        self.comboBox_3.setItemText(8, _translate("MainWindow", "Block 9"))
        self.comboBox_3.setItemText(9, _translate("MainWindow", "Block 10"))
        self.comboBox_3.setItemText(10, _translate("MainWindow", "Block 11"))
        self.comboBox_3.setItemText(11, _translate("MainWindow", "Block 12"))
        self.comboBox_3.setItemText(12, _translate("MainWindow", "Block 13"))
        self.comboBox_3.setItemText(13, _translate("MainWindow", "Block 14"))
        self.comboBox_3.setItemText(14, _translate("MainWindow", "Block 15"))
        self.groupBox.setTitle(_translate("MainWindow", "Inputs from CTC:"))
        self.label.setText(_translate("MainWindow", "Switch Selction:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "SW1"))
        self.comboBox.setItemText(1, _translate("MainWindow", "SW2"))
        self.label_2.setText(_translate("MainWindow", "Authority:"))
        self.label_3.setText(_translate("MainWindow", "blocks"))
        self.checkBox_4.setText(_translate("MainWindow", "Left"))
        self.checkBox_6.setText(_translate("MainWindow", "Right"))
        self.pushButton_2.setText(_translate("MainWindow", "Defaults"))
        self.label_6.setText(_translate("MainWindow", "m/s"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Inputs from Track Model:"))
        self.checkBox_3.setText(_translate("MainWindow", "Occupied"))
        self.label_5.setText(_translate("MainWindow", "Suggested Speed:"))

    # Handlers:
    # mutual exclusion for check boxes
    def swStatusHandler(self):
        if switches[self.comboBox.currentIndex()] == 'L':
            self.checkBox_4.setChecked(True)
            self.checkBox_6.setChecked(False)
        else:
            self.checkBox_4.setChecked(False)
            self.checkBox_6.setChecked(True)

    def swSelLeftHandler(self):  # 'Left' checkbox is activated
        if self.checkBox_4.isChecked():
            self.checkBox_6.setChecked(False)
            switchIndex = self.comboBox.currentIndex()
            switches[switchIndex] = 'L'
        else:
            self.checkBox_6.setChecked(True)

    def swSelRightHandler(self):  # 'Right' checkbox is activated
        if self.checkBox_6.isChecked():
            self.checkBox_4.setChecked(False)
            switchIndex = self.comboBox.currentIndex()
            switches[switchIndex] = 'R'
        else:
            self.checkBox_4.setChecked(True)

    def blStatusHandler(self):  # New block is selected from the dropdown menu
        if blocks[self.comboBox_3.currentIndex()] == 'O':
            self.checkBox_3.setChecked(True)
        else:
            self.checkBox_3.setChecked(False)

    def defaultsPressHandler(self):  # Defaults button is pressed
        global authority
        global suggestSpeed
        global numSwitches
        global numBlocks
        global switches
        global blocks

        # assigning vals from defaults to variables
        authority = 5
        suggestSpeed = 50
        for i in range(0, numSwitches):
            switches[i] = 'L'
        for j in range(0, numBlocks):
            blocks[j] = 'E'

        # updating UI
        if (self.checkBox_3.isChecked()) and (blocks[self.comboBox_3.currentIndex()] == 'E'):
            self.checkBox_3.setChecked(False)
        self.comboBox_3.setCurrentIndex(0)

        self.textEdit_3.setText(str(authority))  # authority update

        self.checkBox_4.setChecked(True)  # switch state update
        self.checkBox_6.setChecked(False)
        self.comboBox.setCurrentIndex(0)

        self.textEdit.setText(str(suggestSpeed))  # suggested speed update

    def blOccupancyHandler(self):  # The block occupancy status of a block is altered
        if self.checkBox_3.isChecked():
            blocks[self.comboBox_3.currentIndex()] = 'O'
        else:
            blocks[self.comboBox_3.currentIndex()] = 'E'

    def authTextHandler(self):  # When the text field is changed for authority
        text = self.textEdit_3.toPlainText()  # checking to see if it is a valid integer
        if text.isdigit():
            value = int(text)
            if value <= 0:
                self.label_7.setText("must be positive integer")
                self.label_7.setStyleSheet("color : red")
                self.pushButton.setEnabled(False)
            else:
                self.label_7.setText("")
                self.pushButton.setEnabled(True)
                global authority  # pass value out to authority variable
                authority = value
        else:
            self.label_7.setText("must be positive integer")
            self.label_7.setStyleSheet("color : red")
            self.pushButton.setEnabled(False)

    def sugSpeedTextHandler(self):
        text = self.textEdit.toPlainText()  # checking to see if it is a valid integer
        if text.isnumeric() or text.replace(".", "").isnumeric():  # text must be an int or float
            value = float(text)
            if value <= 0:
                self.label_8.setText("must be positive value")
                self.label_8.setStyleSheet("color : red")
                self.pushButton.setEnabled(False)
            else:
                self.label_8.setText("")
                self.pushButton.setEnabled(True)
                global suggestSpeed  # pass suggestSpeed out the global variable
                suggestSpeed = value
        else:
            self.label_8.setText("must be positive value")
            self.label_8.setStyleSheet("color : red")
            self.pushButton.setEnabled(False)

    def applyHandler(self):  # When the apply button is pressed [this will be used to send vals out into main module]
        print("-----------------")
        print("BLOCK STATUS:")
        print("Blocks:", blocks)
        print("-----------------")
        print("-----------------")
        print("SWITCH STATUS:")
        print("Switches:", switches)
        print("-----------------")
        print("AUTHORITY:")
        print("Authority:", authority, " blocks")
        print("-----------------")
        print("SUGGESTED SPEED:")
        print("Suggested Speed:", suggestSpeed, " m/s")
        print("-----------------")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
